### 455. 分发饼干

# 题目
假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i，都有一个胃口值 g[i]，
这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，
这个孩子会得到满足。

你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。

https://leetcode-cn.com/problems/assign-cookies/

# 示例:
```
输入: g = [1,2,3], s = [1,1]
输出: 1
解释:
你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
所以你应该输出1。
```

# 示例
```
输入: g = [1,2], s = [1,2,3]
输出: 2
解释:
你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
你拥有的饼干数量和尺寸都足以让所有孩子满足。
所以你应该输出2.
```

提示：
- 1 <= g.length <= 3 * 10^4
- 0 <= s.length <= 3 * 10^4
- 1 <= g[i], s[j] <= 2^31 - 1

# 解析

##### 贪心
&emsp;&emsp;为了蛮族更多的孩子，就不要造成饼干在尺寸的浪费。大饼干既可以满足胃口大的孩子，也可以满足胃口小的孩子，
那么就应该优先满足胃口大的孩子。

&emsp;&emsp;局部最优就是大饼干给胃口大的孩子，全局最优就是喂饱尽可能多的孩子

&emsp;&emsp;使用贪心算法，先将饼干数组和孩子数组排序，然后从后向前遍历孩子数组，用大饼干优先满足胃口大的孩子，
并统计被满足的孩子数量。

# 代码

https://leetcode.cn/problems/assign-cookies/

```php

$g = [1,2,3]; $s = [1,1];
(new LeetCode0455())->main($g, $s);

class LeetCode0455
{
    public function main($g, $s)
    {
        echo $this->findContentChildren($g, $s);
    }

    function findContentChildren($g, $s)
    {
        sort($g);
        sort($s);
        $index = count($s) - 1;     // 饼干数组的下标
        $res = 0;
        for ($i = count($g) - 1; $i >= 0; $i--) {
            if ($index >= 0 && $s[$index] >= $g[$i]) {
                $res++;
                $index--;
            }
        }
        return $res;
    }
}
```