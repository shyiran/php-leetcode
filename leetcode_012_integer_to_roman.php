<?php
/*
0012. # 题目
罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。
| 字符 | 数值 |
| ---- | ---- |
| I    | 1    |
| V    | 5    |
| X    | 10   |
| L    | 50   |
| C    | 100  |
| D    | 500  |
| M    | 1000 |

例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。
但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。
同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

- I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
- X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。
- C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。

给你一个整数，将其转为罗马数字。

https://leetcode.cn/problems/integer-to-roman/

提示：

- 1 <= num <= 3999

# 示例

```
输入: num = 3
输出: "III"
```

```
输入: num = 4
输出: "IV"
```

```
输入: num = 9
输出: "IX"
```

```
输入: num = 58
输出: "LVIII"
解释: L = 50, V = 5, III = 3.
```

```
输入: num = 1994
输出: "MCMXCIV"
解释: M = 1000, CM = 900, XC = 90, IV = 4.
```

# 解析

## 暴力匹配

这个思路相对比较简单，因为题目中说输入在 1~3999 的范围内，所以把 1 到 9，10 到 90，100 到 900，1000 到 3000 对应的罗马数字都表示出来，
最后对于任何输入，要做的就是把找到的罗马数字组合起来即可。

比如输入是 2359，找到 2000，300，50，9 对应的罗马数字为 MM，CCC，L，IX，组合后得到结果为 MMCCCLIX

## 贪心 + 哈希表

每次尽量使用最大的数来表示。比如对于 1994 这个数，如果每次尽量用最大的数来表示，依次选 1000，900，90，4，会得到正确结果 MCMXCIV。

所以，将哈希表按照从大到小的顺序排列，然后遍历哈希表，直到表示完整个输入。

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/integer-to-roman/
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

class LeetCode0012
{
    // 暴力匹配
    function intToRoman2($num) {
        $map = [
            ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'],   //0, 1~9
            ['', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC'],   //0, 10~90
            ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM'],   //0, 100~900
            ['', 'M', 'MM', 'MMM'],                                         //0, 1000~3000，题目中说明数字最高为3999
        ];
        $res = '';
        $res .= $map[3][intval($num / 1000) % 10];
        $res .= $map[2][intval($num / 100) % 10];
        $res .= $map[1][intval($num / 10) % 10];
        $res .= $map[0][$num % 10];
        return $res;
    }
    // 贪心 + 哈希表
    function intToRoman($num)
    {
        $hash = [
            1000 => 'M',
            900 => 'CM',
            500 => 'D',
            400 => 'CD',
            100 => 'C',
            90 => 'XC',
            50 => 'L',
            40 => 'XL',
            10 => 'X',
            9 => 'IX',
            5 => 'V',
            4 => 'IV',
            1 => 'I',
        ];
        $res = '';
        foreach ($hash as $key => $s) {
            if (intval($num / $key) != 0) {
                $count = intval($num / $key);
                $res .= str_repeat($s, $count);
                $num %= $key;
            }
        }
        return $res;
    }
}

