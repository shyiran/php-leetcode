<?php
/*
860. 柠檬水找零
# 题目
在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。
每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。
注意，一开始你手头没有任何零钱。

给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。
https://leetcode-cn.com/problems/lemonade-change/

# 示例：

输入：bills = [5,5,5,10,20]
输出：true
解释：
前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
由于所有客户都得到了正确的找零，所以我们输出 true。

输入：bills = [5,5,10,10,20]
输出：false
解释：
前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。
对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。
对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。
由于不是每位顾客都得到了正确的找零，所以答案是 false。


输入：bills = [5,5,10]
输出：true

输入：bills = [10,10]
输出：false
```

提示：
- 1 <= bills.length <= 10^5
- bills[i] 不是 5 就是 10 或是 20

# 解析

##### 贪心
&emsp;&emsp;只需要维护三个数值的金额，即5、10、20。有如下三种情况：
1. 账单是5，直接收下
2. 账单是10，消耗一个5，增加一个10
3. 账单是20，有限消耗一个5一个10，如果不够那么消耗三个5。
&emsp;&emsp;
情况一和二是固定逻辑，唯一不确定的是情况三。
因为10元只能给20的找零，而5元可以给10元和20元都找零，所以5元更万能，所以遇到20元的情况优先用10元的找零。
局部最优：遇到20元，优先消耗10元的方案
全局最优：完成全部的找零
https://leetcode.cn/problems/lemonade-change/
*/
class Solution860 {

    /**
     * @param Integer[] $bills
     * @return Boolean
     */
    function lemonadeChange(array $bills):bool {
        //定义初始值
        $five = $ten = 0;
        foreach ($bills as $val) {
            // 情况一,收5
            if ($val== 5){
                $five++;
            }
            //情况二，收10-减5
            if ($val == 10) {
                if ($five <= 0) {
                    return false;
                }
                $ten++;
                $five--;
            }
            //情况三
            if ($val == 20) {
                // 收20--减10+5
                if ($five > 0 && $ten > 0) {
                    $five--;
                    $ten--;
                } else if ($five >= 3) {
                    // 收20--减5+5+5
                    $five -= 3;
                } else {
                    return false;
                }
            }
        }
        return true;
    }
}